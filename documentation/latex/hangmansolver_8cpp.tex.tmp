\hypertarget{hangmansolver_8cpp}{}\section{src/hangmansolver.cpp File Reference}
\label{hangmansolver_8cpp}\index{src/hangmansolver.\+cpp@{src/hangmansolver.\+cpp}}


Implementations of all the functions.  


{\ttfamily \#include $<$iterator$>$}\newline
{\ttfamily \#include $<$algorithm$>$}\newline
{\ttfamily \#include $<$fstream$>$}\newline
{\ttfamily \#include \char`\"{}../include/hangman.\+h\char`\"{}}\newline
Include dependency graph for hangmansolver.\+cpp\+:
% FIG 0
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
std\+::vector$<$ std\+::string $>$ \hyperlink{hangmansolver_8cpp_ada47e9338f9e87b423f8214dc4a736e6}{read\+\_\+dictionary} (const std\+::string \&path)
\begin{DoxyCompactList}\small\item\em Fill a vector of strings from a file. \end{DoxyCompactList}\item 
std\+::vector$<$ std\+::string $>$ \hyperlink{hangmansolver_8cpp_a4905d4615c76e8b03b2485034f1dbda1}{filter\+\_\+length} (const std\+::vector$<$ std\+::string $>$ \&dictionary, unsigned length)
\begin{DoxyCompactList}\small\item\em Filters out words that don\textquotesingle{}t match the desired length. \end{DoxyCompactList}\item 
std\+::vector$<$ std\+::string $>$ \hyperlink{hangmansolver_8cpp_ad47d17ecfd4f083c423979fec14e17f7}{filter\+\_\+pattern} (const std\+::vector$<$ std\+::string $>$ \&dictionary, const std\+::string \&pattern, char wildcard)
\begin{DoxyCompactList}\small\item\em Filter words that dont match the provided pattern. \end{DoxyCompactList}\item 
std\+::map$<$ char, unsigned $>$ \hyperlink{hangmansolver_8cpp_a5e092642187020491952150cd43d0ee1}{count\+\_\+character\+\_\+frequency} (const std\+::vector$<$ std\+::string $>$ \&dictionary, const std\+::string \&pattern)
\begin{DoxyCompactList}\small\item\em Counts the appearance of characters in words. Each character is counted once per word. If it\textquotesingle{}s possition matches the pattern\textquotesingle{}s, it\textquotesingle{}s ignored. \end{DoxyCompactList}\item 
std\+::vector$<$ char $>$ \hyperlink{hangmansolver_8cpp_a3663781c1785f8bd725da940b07e2fb9}{frequency\+\_\+to\+\_\+array} (const std\+::map$<$ char, unsigned $>$ \&character\+\_\+frequency)
\begin{DoxyCompactList}\small\item\em Transforms a map of characters and their appearance counters to an array sorted by the appearance counter. \end{DoxyCompactList}\item 
std\+::experimental\+::optional$<$ char $>$ \hyperlink{hangmansolver_8cpp_a8df83002e03d77a8976c05beab222dd4}{get\+\_\+next\+\_\+char} (const std\+::vector$<$ char $>$ \&char\+\_\+array, const std\+::string \&ignore)
\begin{DoxyCompactList}\small\item\em Get the character that apeared in the most words. \end{DoxyCompactList}\item 
std\+::experimental\+::optional$<$ char $>$ \hyperlink{hangmansolver_8cpp_a7e06b1d46a5289a2738001193cccb5a2}{get\+\_\+next\+\_\+vowel} (const std\+::vector$<$ char $>$ \&char\+\_\+array, const std\+::string \&ignore)
\begin{DoxyCompactList}\small\item\em Get the vowel that apeared in the most words. \end{DoxyCompactList}\item 
std\+::experimental\+::optional$<$ char $>$ \hyperlink{hangmansolver_8cpp_aab30499b410710eeeeb7688234ee5aef}{get\+\_\+next\+\_\+constant} (const std\+::vector$<$ char $>$ \&char\+\_\+array, const std\+::string \&ignore)
\begin{DoxyCompactList}\small\item\em Get the constatnt that apeared in the most words. \end{DoxyCompactList}\item 
std\+::experimental\+::optional$<$ std\+::vector$<$ unsigned $>$ $>$ \hyperlink{hangmansolver_8cpp_a8b79ef16e04c4f46d2204a618a3b6fb9}{find\+\_\+char\+\_\+positions} (const std\+::vector$<$ std\+::string $>$ \&dictionary, char c)
\begin{DoxyCompactList}\small\item\em If a character appears in the same possitions in all provided words, it returns their positions. \end{DoxyCompactList}\item 
std\+::string \hyperlink{hangmansolver_8cpp_adbfbe949254445d2547b52546f56c07f}{remove\+\_\+pattern} (const std\+::string \&word, const std\+::string \&pattern, char wildcard)
\begin{DoxyCompactList}\small\item\em Removes the characters of pattern from word. \end{DoxyCompactList}\item 
std\+::vector$<$ std\+::string $>$ \hyperlink{hangmansolver_8cpp_ab27e44b6f131bd9d905bfeaad5c077c6}{must\+\_\+contain} (const std\+::vector$<$ std\+::string $>$ \&dictionary, char c, const std\+::string \&pattern)
\begin{DoxyCompactList}\small\item\em Returns a vector of words that contain the specified character, ignoring it\textquotesingle{}s appearence in the pattern (if provided) \end{DoxyCompactList}\item 
std\+::vector$<$ std\+::string $>$ \hyperlink{hangmansolver_8cpp_a704e6e379a70c218fc80e3cea533d634}{must\+\_\+not\+\_\+contain} (const std\+::vector$<$ std\+::string $>$ \&dictionary, char c, const std\+::string \&pattern)
\begin{DoxyCompactList}\small\item\em Returns a vector of words that don\textquotesingle{}t contain the specified character, ignoring it\textquotesingle{}s appearence in the pattern (if provided) \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
Implementations of all the functions. 



\subsection{Function Documentation}
\mbox{\Hypertarget{hangmansolver_8cpp_a5e092642187020491952150cd43d0ee1}\label{hangmansolver_8cpp_a5e092642187020491952150cd43d0ee1}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!count\+\_\+character\+\_\+frequency@{count\+\_\+character\+\_\+frequency}}
\index{count\+\_\+character\+\_\+frequency@{count\+\_\+character\+\_\+frequency}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{count\+\_\+character\+\_\+frequency()}{count\_character\_frequency()}}
{\footnotesize\ttfamily std\+::map$<$char, unsigned$>$ count\+\_\+character\+\_\+frequency (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ std\+::string $>$ \&}]{dictionary,  }\item[{const std\+::string \&}]{pattern = {\ttfamily \char`\"{}\char`\"{}} }\end{DoxyParamCaption})}



Counts the appearance of characters in words. Each character is counted once per word. If it\textquotesingle{}s possition matches the pattern\textquotesingle{}s, it\textquotesingle{}s ignored. 


\begin{DoxyParams}{Parameters}
{\em dictionary} & The words to check \\
\hline
{\em pattern} & The pattern to ignore\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A map of characters and their appearance counters 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_a4905d4615c76e8b03b2485034f1dbda1}\label{hangmansolver_8cpp_a4905d4615c76e8b03b2485034f1dbda1}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!filter\+\_\+length@{filter\+\_\+length}}
\index{filter\+\_\+length@{filter\+\_\+length}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{filter\+\_\+length()}{filter\_length()}}
{\footnotesize\ttfamily std\+::vector$<$std\+::string$>$ filter\+\_\+length (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ std\+::string $>$ \&}]{dictionary,  }\item[{unsigned}]{length }\end{DoxyParamCaption})}



Filters out words that don\textquotesingle{}t match the desired length. 


\begin{DoxyParams}{Parameters}
{\em dictionary} & The words to check \\
\hline
{\em length} & The required length\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A vector$<$string$>$ of words that match the length 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_ad47d17ecfd4f083c423979fec14e17f7}\label{hangmansolver_8cpp_ad47d17ecfd4f083c423979fec14e17f7}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!filter\+\_\+pattern@{filter\+\_\+pattern}}
\index{filter\+\_\+pattern@{filter\+\_\+pattern}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{filter\+\_\+pattern()}{filter\_pattern()}}
{\footnotesize\ttfamily std\+::vector$<$std\+::string$>$ filter\+\_\+pattern (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ std\+::string $>$ \&}]{dictionary,  }\item[{const std\+::string \&}]{pattern,  }\item[{char}]{wildcard = {\ttfamily \textquotesingle{}~$\ast$\textquotesingle{}} }\end{DoxyParamCaption})}



Filter words that dont match the provided pattern. 


\begin{DoxyParams}{Parameters}
{\em dictionary} & The words to check \\
\hline
{\em pattern} & A string to match all words. E.\+g. \char`\"{}pot$\ast$to\char`\"{} \\
\hline
{\em wildcard} & The character to ignore in the pattern. Default \textquotesingle{}$\ast$\textquotesingle{}\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A vector$<$string$>$ of words that match the pattern 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_a8b79ef16e04c4f46d2204a618a3b6fb9}\label{hangmansolver_8cpp_a8b79ef16e04c4f46d2204a618a3b6fb9}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!find\+\_\+char\+\_\+positions@{find\+\_\+char\+\_\+positions}}
\index{find\+\_\+char\+\_\+positions@{find\+\_\+char\+\_\+positions}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{find\+\_\+char\+\_\+positions()}{find\_char\_positions()}}
{\footnotesize\ttfamily std\+::experimental\+::optional$<$std\+::vector$<$unsigned$>$ $>$ find\+\_\+char\+\_\+positions (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ std\+::string $>$ \&}]{dictionary,  }\item[{char}]{c }\end{DoxyParamCaption})}



If a character appears in the same possitions in all provided words, it returns their positions. 


\begin{DoxyParams}{Parameters}
{\em dictionary} & The words to check \\
\hline
{\em c} & The character to find positions\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
A vector$<$unsigned$>$ with the positions of the character 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_a3663781c1785f8bd725da940b07e2fb9}\label{hangmansolver_8cpp_a3663781c1785f8bd725da940b07e2fb9}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!frequency\+\_\+to\+\_\+array@{frequency\+\_\+to\+\_\+array}}
\index{frequency\+\_\+to\+\_\+array@{frequency\+\_\+to\+\_\+array}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{frequency\+\_\+to\+\_\+array()}{frequency\_to\_array()}}
{\footnotesize\ttfamily std\+::vector$<$char$>$ frequency\+\_\+to\+\_\+array (\begin{DoxyParamCaption}\item[{const std\+::map$<$ char, unsigned $>$ \&}]{character\+\_\+frequency }\end{DoxyParamCaption})}



Transforms a map of characters and their appearance counters to an array sorted by the appearance counter. 


\begin{DoxyParams}{Parameters}
{\em character\+\_\+frequency} & A map of characters and their appearance counters\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
An array sorted by the appearance counter 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_a8df83002e03d77a8976c05beab222dd4}\label{hangmansolver_8cpp_a8df83002e03d77a8976c05beab222dd4}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!get\+\_\+next\+\_\+char@{get\+\_\+next\+\_\+char}}
\index{get\+\_\+next\+\_\+char@{get\+\_\+next\+\_\+char}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{get\+\_\+next\+\_\+char()}{get\_next\_char()}}
{\footnotesize\ttfamily std\+::experimental\+::optional$<$char$>$ get\+\_\+next\+\_\+char (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ char $>$ \&}]{char\+\_\+array,  }\item[{const std\+::string \&}]{ignore = {\ttfamily \char`\"{}\char`\"{}} }\end{DoxyParamCaption})}



Get the character that apeared in the most words. 


\begin{DoxyParams}{Parameters}
{\em char\+\_\+array} & Characters sorted by appearance frequency \\
\hline
{\em ignore} & Characters to ignore if they come up\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The next possible character. if there are none returns nullopt 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_aab30499b410710eeeeb7688234ee5aef}\label{hangmansolver_8cpp_aab30499b410710eeeeb7688234ee5aef}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!get\+\_\+next\+\_\+constant@{get\+\_\+next\+\_\+constant}}
\index{get\+\_\+next\+\_\+constant@{get\+\_\+next\+\_\+constant}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{get\+\_\+next\+\_\+constant()}{get\_next\_constant()}}
{\footnotesize\ttfamily std\+::experimental\+::optional$<$char$>$ get\+\_\+next\+\_\+constant (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ char $>$ \&}]{char\+\_\+array,  }\item[{const std\+::string \&}]{ignore = {\ttfamily \char`\"{}\char`\"{}} }\end{DoxyParamCaption})}



Get the constatnt that apeared in the most words. 


\begin{DoxyParams}{Parameters}
{\em char\+\_\+array} & Characters sorted by appearance frequency \\
\hline
{\em ignore} & Characters to ignore if they come up\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The next possible constant character. if there are none returns nullopt 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_a7e06b1d46a5289a2738001193cccb5a2}\label{hangmansolver_8cpp_a7e06b1d46a5289a2738001193cccb5a2}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!get\+\_\+next\+\_\+vowel@{get\+\_\+next\+\_\+vowel}}
\index{get\+\_\+next\+\_\+vowel@{get\+\_\+next\+\_\+vowel}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{get\+\_\+next\+\_\+vowel()}{get\_next\_vowel()}}
{\footnotesize\ttfamily std\+::experimental\+::optional$<$char$>$ get\+\_\+next\+\_\+vowel (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ char $>$ \&}]{char\+\_\+array,  }\item[{const std\+::string \&}]{ignore = {\ttfamily \char`\"{}\char`\"{}} }\end{DoxyParamCaption})}



Get the vowel that apeared in the most words. 


\begin{DoxyParams}{Parameters}
{\em char\+\_\+array} & Characters sorted by appearance frequency \\
\hline
{\em ignore} & Characters to ignore if they come up\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The next possible vowel character. if there are none returns nullopt 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_ab27e44b6f131bd9d905bfeaad5c077c6}\label{hangmansolver_8cpp_ab27e44b6f131bd9d905bfeaad5c077c6}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!must\+\_\+contain@{must\+\_\+contain}}
\index{must\+\_\+contain@{must\+\_\+contain}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{must\+\_\+contain()}{must\_contain()}}
{\footnotesize\ttfamily std\+::vector$<$std\+::string$>$ must\+\_\+contain (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ std\+::string $>$ \&}]{dictionary,  }\item[{char}]{c,  }\item[{const std\+::string \&}]{pattern = {\ttfamily \char`\"{}\char`\"{}} }\end{DoxyParamCaption})}



Returns a vector of words that contain the specified character, ignoring it\textquotesingle{}s appearence in the pattern (if provided) 


\begin{DoxyParams}{Parameters}
{\em dictionary} & A vector of words that you are currently choosing from \\
\hline
{\em c} & The character that the words must contain \\
\hline
{\em pattern} & The pattern wich should be ignored in all words\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
a vector of words that contain the specified character. 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_a704e6e379a70c218fc80e3cea533d634}\label{hangmansolver_8cpp_a704e6e379a70c218fc80e3cea533d634}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!must\+\_\+not\+\_\+contain@{must\+\_\+not\+\_\+contain}}
\index{must\+\_\+not\+\_\+contain@{must\+\_\+not\+\_\+contain}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{must\+\_\+not\+\_\+contain()}{must\_not\_contain()}}
{\footnotesize\ttfamily std\+::vector$<$std\+::string$>$ must\+\_\+not\+\_\+contain (\begin{DoxyParamCaption}\item[{const std\+::vector$<$ std\+::string $>$ \&}]{dictionary,  }\item[{char}]{c,  }\item[{const std\+::string \&}]{pattern = {\ttfamily \char`\"{}\char`\"{}} }\end{DoxyParamCaption})}



Returns a vector of words that don\textquotesingle{}t contain the specified character, ignoring it\textquotesingle{}s appearence in the pattern (if provided) 


\begin{DoxyParams}{Parameters}
{\em dictionary} & A vector of words that you are currently choosing from \\
\hline
{\em c} & The character that the words must not contain \\
\hline
{\em pattern} & The pattern wich should be ignored in all words\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
a vector of words that don\textquotesingle{}t contain the specified character. 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_ada47e9338f9e87b423f8214dc4a736e6}\label{hangmansolver_8cpp_ada47e9338f9e87b423f8214dc4a736e6}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!read\+\_\+dictionary@{read\+\_\+dictionary}}
\index{read\+\_\+dictionary@{read\+\_\+dictionary}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{read\+\_\+dictionary()}{read\_dictionary()}}
{\footnotesize\ttfamily std\+::vector$<$std\+::string$>$ read\+\_\+dictionary (\begin{DoxyParamCaption}\item[{const std\+::string \&}]{path }\end{DoxyParamCaption})}



Fill a vector of strings from a file. 


\begin{DoxyParams}{Parameters}
{\em path} & Where to find the dictinary\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
vector$<$string$>$ containing lines of the dictionary 
\end{DoxyReturn}
\mbox{\Hypertarget{hangmansolver_8cpp_adbfbe949254445d2547b52546f56c07f}\label{hangmansolver_8cpp_adbfbe949254445d2547b52546f56c07f}} 
\index{hangmansolver.\+cpp@{hangmansolver.\+cpp}!remove\+\_\+pattern@{remove\+\_\+pattern}}
\index{remove\+\_\+pattern@{remove\+\_\+pattern}!hangmansolver.\+cpp@{hangmansolver.\+cpp}}
\subsubsection{\texorpdfstring{remove\+\_\+pattern()}{remove\_pattern()}}
{\footnotesize\ttfamily std\+::string remove\+\_\+pattern (\begin{DoxyParamCaption}\item[{const std\+::string \&}]{word,  }\item[{const std\+::string \&}]{pattern,  }\item[{char}]{wildcard = {\ttfamily \textquotesingle{}~$\ast$\textquotesingle{}} }\end{DoxyParamCaption})}



Removes the characters of pattern from word. 


\begin{DoxyParams}{Parameters}
{\em word} & The word you need to clean up \\
\hline
{\em pattern} & The characters you want removed from word \\
\hline
{\em wildcard} & If this character is in the pattern it will not be removed from word\\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
The word but without any characters of the pattern 
\end{DoxyReturn}
